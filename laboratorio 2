public int[] invertirArray(int[] A){
    /** */
    //Procedimiento para invertir la matriz
    /** 
    for (int i=0; i<numeros.length/2; i++) {
            aux = numeros[i];
            numeros[i] = numeros[numeros.length-1-i];
            numeros[numeros.length-1-i] = aux;
        }
    return aux;
}

public int[] rotarIzquierdaArray(int[] A){
    /** */
    //Procedimiento para rotar la matriz
    /** */
    int primero = numeros[0];
  int x;
  for(x= 0; x<numeros.length-1; x++)
    numeros[x] = numeros[x+1];
  numeros[x]= primero;
    return numeros;
}

static void filatriangulo(int n){
  if(n>0){
      System.out.print("* ");
      filatriangulo(n-1);
  }
  else System.out.println();
}
static void triangulo(int n)
{
  if(n>0){
     triangulo(n-1);
     filatriangulo(n);
  }
}

public static void main(String[] args)
{
   triangulo(3);
}  

//constructores en arraylist
new ArrayList()
new ArrayList(int size)
metodos principales de un arraylist

void add(int index, E element)
boolean addAll(Collection<? extends E> c)
boolean add(E e)
boolean addAll(int index, Collection<? extends E> c)
void clear()
boolean isEmpty()
Iterator()
listIterator()
E get(int index)
void ensureCapacity(int requiredCapacity)
int lastIndexOf(Object o)
Object[] toArray()
Object clone()
<T> T[] toArray(T[] a)
boolean contains(Object o)
int indexOf(Object o)
E remove(int index)
boolean remove(Object o)
boolean removeAll(Collection<?> c)
boolean removeIf(Predicate<? super E> filter)
protected void removeRange(int fromIndex, int toIndex)
void replaceAll(UnaryOperator<E> operator)
void retainAll(Collection<?> c)
E set(int index, E element)
void sort(Comparator<? super E> c)
Spliterator<E> spliterator()
int size()
List<E> subList(int fromIndex, int toIndex)
void trimToSize()
Caja de clase pública {
    objeto objeto privado;

    public void set(Objeto objeto) { this.object = object; }
    Objeto público get () { objeto de retorno; }
}
class name<T1, T2, ..., Tn> { /* ... */ }
/**
 * Generic version of the Box class.
 * @param <T> the type of the value being boxed
 */
public class Box<T> {
    // T stands for "Type"
    private T t;

    public void set(T t) { this.t = t; }
    public T get() { return t; }
}
Box<Integer> integerBox;
Box<Integer> integerBox = new Box<Integer>();
public interface Pair<K, V> {
    public K getKey();
    public V getValue();
}

public class OrderedPair<K, V> implements Pair<K, V> {

    private K key;
    private V value;

    public OrderedPair(K key, V value) {
	this.key = key;
	this.value = value;
    }

    public K getKey()	{ return key; }
    public V getValue() { return value; }
}
Pair<String, Integer> p1 = new OrderedPair<String, Integer>("Even", 8);
Pair<String, String>  p2 = new OrderedPair<String, String>("hello", "world");
OrderedPair<String, Integer> p1 = new OrderedPair<>("Even", 8);
OrderedPair<String, String>  p2 = new OrderedPair<>("hello", "world");
OrderedPair<String, Box<Integer>> p = new OrderedPair<>("primes", new Box<Integer>(...));



